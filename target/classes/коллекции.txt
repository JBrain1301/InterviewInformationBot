<b>Коллекциями/контейнерами</b>
в Java принято называть классы, основная цель которых – хранить набор других элементов.
<b>Преимущества использования коллекций</b>
Массивы обладают значительными недостатками. Одним из них является конечный размер массива, как следствие, необходимость следить за размером массива. Другим — индексная адресация, что не всегда удобно, т.к. ограничивает возможности добавления и удаления объектов. Чтобы избавиться от этих недостатков уже несколько десятилетий программисты используют рекурсивные типы данных, такие как списки и деревья. Стандартный набор коллекций Java служит для избавления программиста от необходимости самостоятельно реализовывать эти типы данных и снабжает его дополнительными возможностями.
<b>Какие данные могут хранить коллекции?</b>
Коллекции могут хранить любые ссылочные типы данных.
<b>Какие коллекции есть?</b>
Хотя в Java существует множество коллекций, но все они образуют стройную и логичную систему. Во-первых, в основе всех коллекций лежит применение того или иного интерфейса, который определяет базовый функционал. Среди этих интерфейсов можно выделить следующие:
<b>Collection:</b> базовый интерфейс для всех коллекций и других интерфейсов коллекций
<b>Queue:</b> наследует интерфейс Collection и представляет функционал для структур данных в виде очереди
<b>Deque:</b> наследует интерфейс Queue и представляет функционал для двунаправленных очередей
<b>List:</b> наследует интерфейс Collection и представляет функциональность простых списков
<b>Set:</b> также расширяет интерфейс Collection и используется для хранения множеств уникальных объектов
<b>SortedSet:</b> расширяет интерфейс Set для создания сортированных коллекций
<b>NavigableSet:</b> расширяет интерфейс SortedSet для создания коллекций, в которых можно осуществлять поиск по соответствию
<b>Map:</b> предназначен для созданий структур данных в виде словаря, где каждый элемент имеет определенный ключ и значение. В отличие от других интерфейсов коллекций не наследуется от интерфейса Collection