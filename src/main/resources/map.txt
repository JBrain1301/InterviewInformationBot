<b>HashMap</b>
Реализация Map интерфейса с помощью хеш-таблиц (работает как не синхронная Hashtable, с
поддержкой ключей и значений равных null). В большинстве случаев лучшая по производительности и
памяти реализация Map интерфейса. 
<b>LinkedHashMap</b>
Реализация Map интерфейса, на основе хеш-таблицы и связного списка, то есть ключи в Map'е
хранятся и обходятся во порядке добавления. Данная коллекция работает почти так же быстро как
HashMap. Так же она может быть полезна для создания кешей/.
<b>TreeMap</b>	
Реализация NavigableMap с помощью красно-черного дерева, то есть при обходе коллекции, ключи
будут отсортированы по порядку, так же NavigableMap позволяет искать ближайшее значение к ключу.
<b>WeakHashMap</b>
Аналогична HashMap, однако все ключи являются слабыми ссылками (weak references), то есть garbage collected может удалить объекты ключи и объекты
значения, если других ссылок на эти объекты не существует. WeakHashMap один из самых простых
способов для использования всех преимуществ слабых ссылок.
<b>EnumMap</b>
Высокопроизводительная реализация Map интерфейса, основанная на простом массиве. Все ключи в
этой коллекции могут принадлежать только одному enum типу.
<b>IdentityHashMap</b>
Так же как HashMap, основан на хеш-таблице, однако в отличии от HashMap он
никогда не сравнивает объекты на equals, только на то является ли они реально одиним и тем же
объектом в памяти. Это во-первых, сильно ускоряет работу коллекции, во-вторых, полезно для
защиты от «spoof attacks», когда сознательно генерируется объекты equals другому объекту.
В-третьих, у данной коллекции много применений при обходе графов (таких как глубокое копирование
или сериализация), когда нужно избежать обработки одного объекта несколько раз.