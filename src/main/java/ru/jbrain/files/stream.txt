<b>Stream:</b> 
это объект для универсальной работы с данными. Мы указываем, какие операции хотим провести, при этом не заботясь о деталях реализации. 
Данные могут быть получены из источников, коими являются коллекции или методы, поставляющие данные. Например, список файлов, массив строк, метод range() для числовых промежутков и т.д. То есть, стрим использует существующие коллекции для получения новых элементов, это ни в коем случае не новая структура данных.
К данным затем применяются операторы.
<b>Операторы можно разделить на две группы:</b>
<b>Промежуточные (intermediate)</b>
обрабатывают поступающие элементы и возвращают стрим. Промежуточных операторов в цепочке обработки элементов может быть много.
<b>Терминальные (terminal)</b>
обрабатывают элементы и завершают работу стрима, так что терминальный оператор в цепочке может быть только один.
<b>У стримов есть некоторые особенности:</b>
<b>Во-первых</b>, обработка не начнётся до тех пор, пока не будет вызван терминальный оператор. list.stream().filter(x -> x > 100); не возьмёт ни единого элемента из списка. 
<b>Во-вторых</b>, стрим после обработки нельзя переиспользовать.
<b>Параллельные стримы:</b>
Стримы бывают последовательными (sequential) и параллельными (parallel).
Последовательные выполняются только в текущем потоке, а вот параллельные используют общий пул ForkJoinPool.commonPool(). При этом элементы разбиваются (если это возможно) на несколько групп и обрабатываются в каждом потоке отдельно. Затем на нужном этапе группы объединяются в одну для предоставления конечного результата.
Чтобы получить параллельный стрим, нужно либо вызвать метод parallelStream() вместо stream(), либо превратить обычный стрим в параллельный, вызвав промежуточный оператор parallel.